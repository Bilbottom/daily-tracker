"""
Tests for the ``daily_tracker/integrations/calendars/outlook_mac.py`` module.

This is currently just a dumping ground for some of the code that was used
during development.
"""

# import datetime
#
# import appscript
#
# import daily_tracker.integrations.calendars.outlook_mac as outlook_mac
#
#
# def _check_available_calendars() -> None:
#     """
#     Check the available calendars.
#     """
#     for calendar in appscript.app("Microsoft Outlook").calendars.get():
#         print(calendar.properties.get(), "\n")
#
#
# def _test_calendar_usage() -> None:
#     """
#     Test the usage of the appscript.
#
#     Python code generated by running the following AppleScript through the
#     ASTranslate tool:
#
#         tell application "Microsoft Outlook"
#             tell calendar id 13
#                 set calEvents to (every calendar event whose start time is greater than (date "Friday, 15 July 2016 at
#                  11:00:00") and start time is less than (date "Friday, 15 July 2016 at 17:00:00"))
#             end tell
#         end tell
#     """
#     calendar = appscript.app("Microsoft Outlook").calendars.ID(110)  # Currently hardcoded
#     # print(calendar.properties.get())
#     for event in calendar.calendar_events[appscript.its.start_time > datetime.datetime.now()].get():
#         print(
#             event.subject.get(),
#             event.all_day_flag.get(),
#             event.start_time.get(),
#             event.end_time.get(),
#             event.category.get(),
#         )
#         for category in event.category.get():
#             print(category.name.get(), "\n")
#
#
# def _test_classes() -> None:
#     """
#     Test the classes that pull the details.
#     """
#     oc = outlook_mac.OutlookConnector()
#
#     appointments = oc.get_appointments_between_datetimes(
#         start_datetime=datetime.datetime.now(),
#         end_datetime=datetime.datetime.now() + datetime.timedelta(days=3),
#     )
#     print(appointments)
#
#     appointments = oc.get_appointments_at_datetime(
#         at_datetime=datetime.datetime.now() + datetime.timedelta(hours=1),
#     )
#     print(appointments)
